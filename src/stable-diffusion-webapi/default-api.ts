/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ArtistItem } from '../stable-diffusion-webapi';
// @ts-ignore
import { ExtrasBatchImagesRequest } from '../stable-diffusion-webapi';
// @ts-ignore
import { ExtrasBatchImagesResponse } from '../stable-diffusion-webapi';
// @ts-ignore
import { ExtrasSingleImageRequest } from '../stable-diffusion-webapi';
// @ts-ignore
import { ExtrasSingleImageResponse } from '../stable-diffusion-webapi';
// @ts-ignore
import { FaceRestorerItem } from '../stable-diffusion-webapi';
// @ts-ignore
import { Flags } from '../stable-diffusion-webapi';
// @ts-ignore
import { HTTPValidationError } from '../stable-diffusion-webapi';
// @ts-ignore
import { HypernetworkItem } from '../stable-diffusion-webapi';
// @ts-ignore
import { ImageToImageResponse } from '../stable-diffusion-webapi';
// @ts-ignore
import { InterrogateRequest } from '../stable-diffusion-webapi';
// @ts-ignore
import { Options } from '../stable-diffusion-webapi';
// @ts-ignore
import { PNGInfoRequest } from '../stable-diffusion-webapi';
// @ts-ignore
import { PNGInfoResponse } from '../stable-diffusion-webapi';
// @ts-ignore
import { ProgressResponse } from '../stable-diffusion-webapi';
// @ts-ignore
import { PromptStyleItem } from '../stable-diffusion-webapi';
// @ts-ignore
import { RealesrganItem } from '../stable-diffusion-webapi';
// @ts-ignore
import { SDModelItem } from '../stable-diffusion-webapi';
// @ts-ignore
import { SamplerItem } from '../stable-diffusion-webapi';
// @ts-ignore
import { StableDiffusionProcessingImg2Img } from '../stable-diffusion-webapi';
// @ts-ignore
import { StableDiffusionProcessingTxt2Img } from '../stable-diffusion-webapi';
// @ts-ignore
import { TextToImageResponse } from '../stable-diffusion-webapi';
// @ts-ignore
import { UpscalerItem } from '../stable-diffusion-webapi';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Extras Batch Images Api
         * @param {ExtrasBatchImagesRequest} extrasBatchImagesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasBatchImagesApiSdapiV1ExtraBatchImagesPost: async (extrasBatchImagesRequest: ExtrasBatchImagesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'extrasBatchImagesRequest' is not null or undefined
            assertParamExists('extrasBatchImagesApiSdapiV1ExtraBatchImagesPost', 'extrasBatchImagesRequest', extrasBatchImagesRequest)
            const localVarPath = `/sdapi/v1/extra-batch-images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(extrasBatchImagesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Extras Single Image Api
         * @param {ExtrasSingleImageRequest} extrasSingleImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasSingleImageApiSdapiV1ExtraSingleImagePost: async (extrasSingleImageRequest: ExtrasSingleImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'extrasSingleImageRequest' is not null or undefined
            assertParamExists('extrasSingleImageApiSdapiV1ExtraSingleImagePost', 'extrasSingleImageRequest', extrasSingleImageRequest)
            const localVarPath = `/sdapi/v1/extra-single-image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(extrasSingleImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Artists Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistsCategoriesSdapiV1ArtistCategoriesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sdapi/v1/artist-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Artists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistsSdapiV1ArtistsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sdapi/v1/artists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Cmd Flags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmdFlagsSdapiV1CmdFlagsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sdapi/v1/cmd-flags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigSdapiV1OptionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sdapi/v1/options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Face Restorers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaceRestorersSdapiV1FaceRestorersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sdapi/v1/face-restorers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Hypernetworks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHypernetworksSdapiV1HypernetworksGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sdapi/v1/hypernetworks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Promp Styles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrompStylesSdapiV1PromptStylesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sdapi/v1/prompt-styles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Realesrgan Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealesrganModelsSdapiV1RealesrganModelsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sdapi/v1/realesrgan-models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Samplers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSamplersSdapiV1SamplersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sdapi/v1/samplers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Sd Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSdModelsSdapiV1SdModelsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sdapi/v1/sd-models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Upscalers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpscalersSdapiV1UpscalersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sdapi/v1/upscalers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Img2Imgapi
         * @param {StableDiffusionProcessingImg2Img} stableDiffusionProcessingImg2Img 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        img2imgapiSdapiV1Img2imgPost: async (stableDiffusionProcessingImg2Img: StableDiffusionProcessingImg2Img, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stableDiffusionProcessingImg2Img' is not null or undefined
            assertParamExists('img2imgapiSdapiV1Img2imgPost', 'stableDiffusionProcessingImg2Img', stableDiffusionProcessingImg2Img)
            const localVarPath = `/sdapi/v1/img2img`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stableDiffusionProcessingImg2Img, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Interrogateapi
         * @param {InterrogateRequest} interrogateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        interrogateapiSdapiV1InterrogatePost: async (interrogateRequest: InterrogateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'interrogateRequest' is not null or undefined
            assertParamExists('interrogateapiSdapiV1InterrogatePost', 'interrogateRequest', interrogateRequest)
            const localVarPath = `/sdapi/v1/interrogate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(interrogateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Interruptapi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        interruptapiSdapiV1InterruptPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sdapi/v1/interrupt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pnginfoapi
         * @param {PNGInfoRequest} pNGInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pnginfoapiSdapiV1PngInfoPost: async (pNGInfoRequest: PNGInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pNGInfoRequest' is not null or undefined
            assertParamExists('pnginfoapiSdapiV1PngInfoPost', 'pNGInfoRequest', pNGInfoRequest)
            const localVarPath = `/sdapi/v1/png-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pNGInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Progressapi
         * @param {boolean} [skipCurrentImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        progressapiSdapiV1ProgressGet: async (skipCurrentImage?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sdapi/v1/progress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skipCurrentImage !== undefined) {
                localVarQueryParameter['skip_current_image'] = skipCurrentImage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Config
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setConfigSdapiV1OptionsPost: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('setConfigSdapiV1OptionsPost', 'body', body)
            const localVarPath = `/sdapi/v1/options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skipSdapiV1SkipPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sdapi/v1/skip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Text2Imgapi
         * @param {StableDiffusionProcessingTxt2Img} stableDiffusionProcessingTxt2Img 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        text2imgapiSdapiV1Txt2imgPost: async (stableDiffusionProcessingTxt2Img: StableDiffusionProcessingTxt2Img, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stableDiffusionProcessingTxt2Img' is not null or undefined
            assertParamExists('text2imgapiSdapiV1Txt2imgPost', 'stableDiffusionProcessingTxt2Img', stableDiffusionProcessingTxt2Img)
            const localVarPath = `/sdapi/v1/txt2img`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stableDiffusionProcessingTxt2Img, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Extras Batch Images Api
         * @param {ExtrasBatchImagesRequest} extrasBatchImagesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasBatchImagesApiSdapiV1ExtraBatchImagesPost(extrasBatchImagesRequest: ExtrasBatchImagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExtrasBatchImagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasBatchImagesApiSdapiV1ExtraBatchImagesPost(extrasBatchImagesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Extras Single Image Api
         * @param {ExtrasSingleImageRequest} extrasSingleImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extrasSingleImageApiSdapiV1ExtraSingleImagePost(extrasSingleImageRequest: ExtrasSingleImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExtrasSingleImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extrasSingleImageApiSdapiV1ExtraSingleImagePost(extrasSingleImageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Artists Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtistsCategoriesSdapiV1ArtistCategoriesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArtistsCategoriesSdapiV1ArtistCategoriesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Artists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArtistsSdapiV1ArtistsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArtistItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArtistsSdapiV1ArtistsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Cmd Flags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCmdFlagsSdapiV1CmdFlagsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Flags>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCmdFlagsSdapiV1CmdFlagsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfigSdapiV1OptionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Options>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfigSdapiV1OptionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Face Restorers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFaceRestorersSdapiV1FaceRestorersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FaceRestorerItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFaceRestorersSdapiV1FaceRestorersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Hypernetworks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHypernetworksSdapiV1HypernetworksGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HypernetworkItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHypernetworksSdapiV1HypernetworksGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Promp Styles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrompStylesSdapiV1PromptStylesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PromptStyleItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrompStylesSdapiV1PromptStylesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Realesrgan Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRealesrganModelsSdapiV1RealesrganModelsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RealesrganItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRealesrganModelsSdapiV1RealesrganModelsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Samplers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSamplersSdapiV1SamplersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SamplerItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSamplersSdapiV1SamplersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Sd Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSdModelsSdapiV1SdModelsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SDModelItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSdModelsSdapiV1SdModelsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Upscalers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUpscalersSdapiV1UpscalersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UpscalerItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUpscalersSdapiV1UpscalersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Img2Imgapi
         * @param {StableDiffusionProcessingImg2Img} stableDiffusionProcessingImg2Img 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async img2imgapiSdapiV1Img2imgPost(stableDiffusionProcessingImg2Img: StableDiffusionProcessingImg2Img, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageToImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.img2imgapiSdapiV1Img2imgPost(stableDiffusionProcessingImg2Img, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Interrogateapi
         * @param {InterrogateRequest} interrogateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async interrogateapiSdapiV1InterrogatePost(interrogateRequest: InterrogateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.interrogateapiSdapiV1InterrogatePost(interrogateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Interruptapi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async interruptapiSdapiV1InterruptPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.interruptapiSdapiV1InterruptPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pnginfoapi
         * @param {PNGInfoRequest} pNGInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pnginfoapiSdapiV1PngInfoPost(pNGInfoRequest: PNGInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PNGInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pnginfoapiSdapiV1PngInfoPost(pNGInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Progressapi
         * @param {boolean} [skipCurrentImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async progressapiSdapiV1ProgressGet(skipCurrentImage?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.progressapiSdapiV1ProgressGet(skipCurrentImage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set Config
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setConfigSdapiV1OptionsPost(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setConfigSdapiV1OptionsPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skipSdapiV1SkipPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skipSdapiV1SkipPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Text2Imgapi
         * @param {StableDiffusionProcessingTxt2Img} stableDiffusionProcessingTxt2Img 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async text2imgapiSdapiV1Txt2imgPost(stableDiffusionProcessingTxt2Img: StableDiffusionProcessingTxt2Img, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextToImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.text2imgapiSdapiV1Txt2imgPost(stableDiffusionProcessingTxt2Img, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Extras Batch Images Api
         * @param {ExtrasBatchImagesRequest} extrasBatchImagesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasBatchImagesApiSdapiV1ExtraBatchImagesPost(extrasBatchImagesRequest: ExtrasBatchImagesRequest, options?: any): AxiosPromise<ExtrasBatchImagesResponse> {
            return localVarFp.extrasBatchImagesApiSdapiV1ExtraBatchImagesPost(extrasBatchImagesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Extras Single Image Api
         * @param {ExtrasSingleImageRequest} extrasSingleImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extrasSingleImageApiSdapiV1ExtraSingleImagePost(extrasSingleImageRequest: ExtrasSingleImageRequest, options?: any): AxiosPromise<ExtrasSingleImageResponse> {
            return localVarFp.extrasSingleImageApiSdapiV1ExtraSingleImagePost(extrasSingleImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Artists Categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistsCategoriesSdapiV1ArtistCategoriesGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getArtistsCategoriesSdapiV1ArtistCategoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Artists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArtistsSdapiV1ArtistsGet(options?: any): AxiosPromise<Array<ArtistItem>> {
            return localVarFp.getArtistsSdapiV1ArtistsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Cmd Flags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmdFlagsSdapiV1CmdFlagsGet(options?: any): AxiosPromise<Flags> {
            return localVarFp.getCmdFlagsSdapiV1CmdFlagsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigSdapiV1OptionsGet(options?: any): AxiosPromise<Options> {
            return localVarFp.getConfigSdapiV1OptionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Face Restorers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaceRestorersSdapiV1FaceRestorersGet(options?: any): AxiosPromise<Array<FaceRestorerItem>> {
            return localVarFp.getFaceRestorersSdapiV1FaceRestorersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Hypernetworks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHypernetworksSdapiV1HypernetworksGet(options?: any): AxiosPromise<Array<HypernetworkItem>> {
            return localVarFp.getHypernetworksSdapiV1HypernetworksGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Promp Styles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrompStylesSdapiV1PromptStylesGet(options?: any): AxiosPromise<Array<PromptStyleItem>> {
            return localVarFp.getPrompStylesSdapiV1PromptStylesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Realesrgan Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRealesrganModelsSdapiV1RealesrganModelsGet(options?: any): AxiosPromise<Array<RealesrganItem>> {
            return localVarFp.getRealesrganModelsSdapiV1RealesrganModelsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Samplers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSamplersSdapiV1SamplersGet(options?: any): AxiosPromise<Array<SamplerItem>> {
            return localVarFp.getSamplersSdapiV1SamplersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Sd Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSdModelsSdapiV1SdModelsGet(options?: any): AxiosPromise<Array<SDModelItem>> {
            return localVarFp.getSdModelsSdapiV1SdModelsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Upscalers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUpscalersSdapiV1UpscalersGet(options?: any): AxiosPromise<Array<UpscalerItem>> {
            return localVarFp.getUpscalersSdapiV1UpscalersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Img2Imgapi
         * @param {StableDiffusionProcessingImg2Img} stableDiffusionProcessingImg2Img 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        img2imgapiSdapiV1Img2imgPost(stableDiffusionProcessingImg2Img: StableDiffusionProcessingImg2Img, options?: any): AxiosPromise<ImageToImageResponse> {
            return localVarFp.img2imgapiSdapiV1Img2imgPost(stableDiffusionProcessingImg2Img, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Interrogateapi
         * @param {InterrogateRequest} interrogateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        interrogateapiSdapiV1InterrogatePost(interrogateRequest: InterrogateRequest, options?: any): AxiosPromise<any> {
            return localVarFp.interrogateapiSdapiV1InterrogatePost(interrogateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Interruptapi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        interruptapiSdapiV1InterruptPost(options?: any): AxiosPromise<any> {
            return localVarFp.interruptapiSdapiV1InterruptPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pnginfoapi
         * @param {PNGInfoRequest} pNGInfoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pnginfoapiSdapiV1PngInfoPost(pNGInfoRequest: PNGInfoRequest, options?: any): AxiosPromise<PNGInfoResponse> {
            return localVarFp.pnginfoapiSdapiV1PngInfoPost(pNGInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Progressapi
         * @param {boolean} [skipCurrentImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        progressapiSdapiV1ProgressGet(skipCurrentImage?: boolean, options?: any): AxiosPromise<ProgressResponse> {
            return localVarFp.progressapiSdapiV1ProgressGet(skipCurrentImage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Config
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setConfigSdapiV1OptionsPost(body: object, options?: any): AxiosPromise<any> {
            return localVarFp.setConfigSdapiV1OptionsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skipSdapiV1SkipPost(options?: any): AxiosPromise<any> {
            return localVarFp.skipSdapiV1SkipPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Text2Imgapi
         * @param {StableDiffusionProcessingTxt2Img} stableDiffusionProcessingTxt2Img 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        text2imgapiSdapiV1Txt2imgPost(stableDiffusionProcessingTxt2Img: StableDiffusionProcessingTxt2Img, options?: any): AxiosPromise<TextToImageResponse> {
            return localVarFp.text2imgapiSdapiV1Txt2imgPost(stableDiffusionProcessingTxt2Img, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Extras Batch Images Api
     * @param {ExtrasBatchImagesRequest} extrasBatchImagesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    extrasBatchImagesApiSdapiV1ExtraBatchImagesPost(extrasBatchImagesRequest: ExtrasBatchImagesRequest, options?: AxiosRequestConfig): AxiosPromise<ExtrasBatchImagesResponse>;

    /**
     * 
     * @summary Extras Single Image Api
     * @param {ExtrasSingleImageRequest} extrasSingleImageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    extrasSingleImageApiSdapiV1ExtraSingleImagePost(extrasSingleImageRequest: ExtrasSingleImageRequest, options?: AxiosRequestConfig): AxiosPromise<ExtrasSingleImageResponse>;

    /**
     * 
     * @summary Get Artists Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getArtistsCategoriesSdapiV1ArtistCategoriesGet(options?: AxiosRequestConfig): AxiosPromise<Array<string>>;

    /**
     * 
     * @summary Get Artists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getArtistsSdapiV1ArtistsGet(options?: AxiosRequestConfig): AxiosPromise<Array<ArtistItem>>;

    /**
     * 
     * @summary Get Cmd Flags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCmdFlagsSdapiV1CmdFlagsGet(options?: AxiosRequestConfig): AxiosPromise<Flags>;

    /**
     * 
     * @summary Get Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getConfigSdapiV1OptionsGet(options?: AxiosRequestConfig): AxiosPromise<Options>;

    /**
     * 
     * @summary Get Face Restorers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getFaceRestorersSdapiV1FaceRestorersGet(options?: AxiosRequestConfig): AxiosPromise<Array<FaceRestorerItem>>;

    /**
     * 
     * @summary Get Hypernetworks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getHypernetworksSdapiV1HypernetworksGet(options?: AxiosRequestConfig): AxiosPromise<Array<HypernetworkItem>>;

    /**
     * 
     * @summary Get Promp Styles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPrompStylesSdapiV1PromptStylesGet(options?: AxiosRequestConfig): AxiosPromise<Array<PromptStyleItem>>;

    /**
     * 
     * @summary Get Realesrgan Models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRealesrganModelsSdapiV1RealesrganModelsGet(options?: AxiosRequestConfig): AxiosPromise<Array<RealesrganItem>>;

    /**
     * 
     * @summary Get Samplers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSamplersSdapiV1SamplersGet(options?: AxiosRequestConfig): AxiosPromise<Array<SamplerItem>>;

    /**
     * 
     * @summary Get Sd Models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSdModelsSdapiV1SdModelsGet(options?: AxiosRequestConfig): AxiosPromise<Array<SDModelItem>>;

    /**
     * 
     * @summary Get Upscalers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUpscalersSdapiV1UpscalersGet(options?: AxiosRequestConfig): AxiosPromise<Array<UpscalerItem>>;

    /**
     * 
     * @summary Img2Imgapi
     * @param {StableDiffusionProcessingImg2Img} stableDiffusionProcessingImg2Img 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    img2imgapiSdapiV1Img2imgPost(stableDiffusionProcessingImg2Img: StableDiffusionProcessingImg2Img, options?: AxiosRequestConfig): AxiosPromise<ImageToImageResponse>;

    /**
     * 
     * @summary Interrogateapi
     * @param {InterrogateRequest} interrogateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    interrogateapiSdapiV1InterrogatePost(interrogateRequest: InterrogateRequest, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Interruptapi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    interruptapiSdapiV1InterruptPost(options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Pnginfoapi
     * @param {PNGInfoRequest} pNGInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    pnginfoapiSdapiV1PngInfoPost(pNGInfoRequest: PNGInfoRequest, options?: AxiosRequestConfig): AxiosPromise<PNGInfoResponse>;

    /**
     * 
     * @summary Progressapi
     * @param {boolean} [skipCurrentImage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    progressapiSdapiV1ProgressGet(skipCurrentImage?: boolean, options?: AxiosRequestConfig): AxiosPromise<ProgressResponse>;

    /**
     * 
     * @summary Set Config
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    setConfigSdapiV1OptionsPost(body: object, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    skipSdapiV1SkipPost(options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Text2Imgapi
     * @param {StableDiffusionProcessingTxt2Img} stableDiffusionProcessingTxt2Img 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    text2imgapiSdapiV1Txt2imgPost(stableDiffusionProcessingTxt2Img: StableDiffusionProcessingTxt2Img, options?: AxiosRequestConfig): AxiosPromise<TextToImageResponse>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Extras Batch Images Api
     * @param {ExtrasBatchImagesRequest} extrasBatchImagesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public extrasBatchImagesApiSdapiV1ExtraBatchImagesPost(extrasBatchImagesRequest: ExtrasBatchImagesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).extrasBatchImagesApiSdapiV1ExtraBatchImagesPost(extrasBatchImagesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Extras Single Image Api
     * @param {ExtrasSingleImageRequest} extrasSingleImageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public extrasSingleImageApiSdapiV1ExtraSingleImagePost(extrasSingleImageRequest: ExtrasSingleImageRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).extrasSingleImageApiSdapiV1ExtraSingleImagePost(extrasSingleImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Artists Categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getArtistsCategoriesSdapiV1ArtistCategoriesGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getArtistsCategoriesSdapiV1ArtistCategoriesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Artists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getArtistsSdapiV1ArtistsGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getArtistsSdapiV1ArtistsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Cmd Flags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCmdFlagsSdapiV1CmdFlagsGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCmdFlagsSdapiV1CmdFlagsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getConfigSdapiV1OptionsGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getConfigSdapiV1OptionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Face Restorers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFaceRestorersSdapiV1FaceRestorersGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFaceRestorersSdapiV1FaceRestorersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Hypernetworks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHypernetworksSdapiV1HypernetworksGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getHypernetworksSdapiV1HypernetworksGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Promp Styles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPrompStylesSdapiV1PromptStylesGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPrompStylesSdapiV1PromptStylesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Realesrgan Models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRealesrganModelsSdapiV1RealesrganModelsGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRealesrganModelsSdapiV1RealesrganModelsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Samplers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSamplersSdapiV1SamplersGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSamplersSdapiV1SamplersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Sd Models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSdModelsSdapiV1SdModelsGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSdModelsSdapiV1SdModelsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Upscalers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUpscalersSdapiV1UpscalersGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUpscalersSdapiV1UpscalersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Img2Imgapi
     * @param {StableDiffusionProcessingImg2Img} stableDiffusionProcessingImg2Img 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public img2imgapiSdapiV1Img2imgPost(stableDiffusionProcessingImg2Img: StableDiffusionProcessingImg2Img, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).img2imgapiSdapiV1Img2imgPost(stableDiffusionProcessingImg2Img, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Interrogateapi
     * @param {InterrogateRequest} interrogateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public interrogateapiSdapiV1InterrogatePost(interrogateRequest: InterrogateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).interrogateapiSdapiV1InterrogatePost(interrogateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Interruptapi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public interruptapiSdapiV1InterruptPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).interruptapiSdapiV1InterruptPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pnginfoapi
     * @param {PNGInfoRequest} pNGInfoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pnginfoapiSdapiV1PngInfoPost(pNGInfoRequest: PNGInfoRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pnginfoapiSdapiV1PngInfoPost(pNGInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Progressapi
     * @param {boolean} [skipCurrentImage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public progressapiSdapiV1ProgressGet(skipCurrentImage?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).progressapiSdapiV1ProgressGet(skipCurrentImage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Config
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setConfigSdapiV1OptionsPost(body: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setConfigSdapiV1OptionsPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public skipSdapiV1SkipPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).skipSdapiV1SkipPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Text2Imgapi
     * @param {StableDiffusionProcessingTxt2Img} stableDiffusionProcessingTxt2Img 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public text2imgapiSdapiV1Txt2imgPost(stableDiffusionProcessingTxt2Img: StableDiffusionProcessingTxt2Img, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).text2imgapiSdapiV1Txt2imgPost(stableDiffusionProcessingTxt2Img, options).then((request) => request(this.axios, this.basePath));
    }
}
